% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{computeWinVerbose}
\alias{computeWinVerbose}
\title{Compute strand information of sliding window (verbose version)}
\usage{
computeWinVerbose(covPosLen, covPosVal, covNegLen, covNegVal, readLength, end,
  win, step, minCov, maxCov, logitThreshold)
}
\arguments{
\item{covPosLen}{the run length of an Rle object which is the coverage comes from positive reads}

\item{covPosVal}{the run value of an Rle object which is the coverage comes from positive reads}

\item{covNegLen}{the run length of an Rle object which is the coverage comes from negative reads}

\item{covNegVal}{the run value of an Rle object which is the coverage comes from negative reads}

\item{readLength}{the average length of reads}

\item{end}{the last base on the reference chromosome that the sliding window atteint}

\item{win}{the size of the sliding window}

\item{step}{the step of the sliding window}

\item{minCov}{if a window has the max coverage smaller than minCov, then it will be rejected regardless its strand proportion.}

\item{maxCov}{if a window has the max coverage greater than maxCov, then it will be kept regardless its strand proportion. If maxCov=0 then it doesn't have any effect on selecting windows.}

\item{logitThreshold}{the logit of the threshold}
}
\value{
A list of two data frames Plus and Minus which respectively contains information of positive windows and negative windows.
Each data frame contains the information of window number, proportion of postive reads, the normalized value calculated from the estimated proportion and error, the sum of reads, the max coverage and the group of max coverage.
}
\description{
Compute the positive proportion, the normalized value to be tested afterward to decide whether the window is kept or not, the sum of reads, the maximum coverage, and the group of each window. Windows are grouped based on their maximum coverage: by default definition, groups spead from 1 to 8, which correspond to the max coverage respectively in the range "0-10","10-20","20-50","50-100","100-200","200-500","500-1000",">1000"
This method is used in the method filterOne when we have to filter the input bam files together with plotting the window information.
}
\examples{
bamfilein <- system.file("data","s1.chr1.bam",package = "rnaCleanR")
alignment <- GenomicAlignments::readGAlignments(bamfilein) 
alignmentInChr1 <- alignment[seqnames(alignment)=="1"] 
covPos <- alignmentInChr1[strand(alignment)=="+"] \%>\% GenomicAlignments::coverage() 
covNeg <- alignmentInChr1[strand(alignment)=="-"] \%>\% GenomicAlignments::coverage() 
len <- length(covChr)
readLength <- 100
win <- 1000
step <- 100
minCov <- 0
maxCov <- 0
logitThreshold <- binomial()$linkfun(0.7) 
windows <- rnaCleanR::computeWinVerbose(runLength(covPos),runValue(covPos),runLength(covNeg),runValue(covNeg),readLength,len,win,step,minCov,maxCov,logitThreshold)

}

