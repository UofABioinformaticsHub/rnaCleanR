% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{computeWin}
\alias{computeWin}
\title{Compute strand information of sliding window}
\usage{
computeWin(covPosLen, covPosVal, covNegLen, covNegVal, readLength, end, win,
  step, minCov, maxCov, logitThreshold)
}
\arguments{
\item{covPosLen}{the run length of an Rle object which is the coverage comes from positive reads}

\item{covPosVal}{the run value of an Rle object which is the coverage comes from positive reads}

\item{covNegLen}{the run length of an Rle object which is the coverage comes from negative reads}

\item{covNegVal}{the run value of an Rle object which is the coverage comes from negative reads}

\item{readLength}{the average length of reads}

\item{end}{the last base on the reference chromosome that the sliding window atteint}

\item{win}{the size of the sliding window}

\item{step}{the step of the sliding window}

\item{minCov}{if a window has the max coverage smaller than minCov, then it will be rejected regardless its strand proportion.}

\item{maxCov}{if a window has the max coverage greater than maxCov, then it will be kept regardless its strand proportion. If maxCov=0 then it doesn't have any effect on selecting windows.}

\item{logitThreshold}{the logit of the threshold}
}
\value{
A list of two data frames Plus and Minus which respectively contains information of positive windows and negative windows. 
Each data frame contains the information of window number, proportion of postive reads, and the value to be tested afterward to decide whether the window is kept or not (this value is calculated from the estimated proportion and error).
}
\description{
Compute the positive proportion and the value to be tested afterward to decide whether the window is kept or not (this value is calculated from the estimated proportion and error).
This method is used in the functions filterOne and filterMulti when we don't need other information of the windows for plotting.
}
\examples{
bamfilein <- system.file("data","s1.chr1.bam",package = "rnaCleanR")
alignment <- GenomicAlignments::readGAlignments(bamfilein) 
alignmentInChr1 <- alignment[seqnames(alignment)=="1"] 
covPos <- alignmentInChr1[strand(alignment)=="+"] \%>\% GenomicAlignments::coverage() 
covNeg <- alignmentInChr1[strand(alignment)=="-"] \%>\% GenomicAlignments::coverage() 
len <- length(covChr)
readLength <- 100
win <- 1000
step <- 100
minCov <- 0
maxCov <- 0
logitThreshold <- binomial()$linkfun(0.7) 
windows <- computeWin(runLength(covPos),runValue(covPos),runLength(covNeg),runValue(covNeg),readLength,len,win,step,minCov,maxCov,logitThreshold)

}
\seealso{
filterOne, filterMulti
}

